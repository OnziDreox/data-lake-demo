---
# EMR cluster and related resources
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ParentVPCStack:
    Description: "Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template."
    Type: String
  LogS3BucketName:
    Description: "S3 log bucket name"
    Type: String
  ParentSSHBastionStack:
    Description: "Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-vpn-bastion.yaml template."
    Type: String
    Default: ""
  KeyName:
    Description: "Optional key pair of the ec2-user to establish a SSH connection to SoftEther VPN."
    Type: String
    Default: ""
  ReleaseLabel:
    Description: "The Amazon EMR release label."
    Type: String
    Default: "emr-6.4.0"
  MasterInstanceType:
    Description: "The instance type to be used for the master instance."
    Type: String
    Default: m4.large
  CoreInstanceType:
    Description: "The instance type to be used for core instances."
    Type: String
    Default: m4.large
  NumberOfCoreInstances:
    Description: "The number of core instances."
    Type: Number
    Default: 2
  EbsRootVolumeSize:
    Description: "The size, in GiB, of the Amazon EBS root device volume of the Linux AMI."
    Type: Number
    Default: 32
  StepConcurrencyLevel:
    Description: "The number of steps that can be executed concurrently."
    Type: Number
    Default: 5
  GlueDatabaseName:
    Description: "The number of the Glue database"
    Type: String
    Default: datalake
Conditions:
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, ""]]
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]
Resources:
  # iam resources
  ServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "elasticmapreduce.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
  Ec2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref Ec2InstanceRole
  AutoScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "application-autoscaling.amazonaws.com"
                - "elasticmapreduce.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforAutoScalingRole
  # security groups
  MasterSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-master"
      VpcId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
  SlaveSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-slave"
      VpcId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
  ServiceAccessSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-service-access"
      VpcId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
  AdditionalMasterSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-additional-master"
      VpcId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
  AdditionalSlaveSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-additional-slave"
      VpcId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
  # master ingress/egress
  MasterSecurityGroupEgressAll:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "-1"
      FromPort: "0"
      ToPort: "0"
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressTcpCidr:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressTcpMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressTcpSlave:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressTcpServiceAccess:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "8443"
      ToPort: "8443"
      SourceSecurityGroupId: !GetAtt ServiceAccessSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressUdpMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "udp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressUdpSlave:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "udp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressIcmpMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "icmp"
      FromPort: "-1"
      ToPort: "-1"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  MasterSecurityGroupIngressIcmpSlave:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "icmp"
      FromPort: "-1"
      ToPort: "-1"
      SourceSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt MasterSecurityGroup.GroupId
  # slave ingress/egress
  SlaveSecurityGroupEgressAll:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "-1"
      FromPort: "0"
      ToPort: "0"
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressTcpMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressTcpSlave:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressTcpServiceAccess:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "8443"
      ToPort: "8443"
      SourceSecurityGroupId: !GetAtt ServiceAccessSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressUdpMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "udp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressUdpSlave:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "udp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressIcmpMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "icmp"
      FromPort: "-1"
      ToPort: "-1"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  SlaveSecurityGroupIngressIcmpSlave:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "icmp"
      FromPort: "-1"
      ToPort: "-1"
      SourceSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt SlaveSecurityGroup.GroupId
  # service access ingress/egress
  ServiceAccessSecurityGroupIngressMaster:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "9443"
      ToPort: "9443"
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt ServiceAccessSecurityGroup.GroupId
  SlaveSecurityGroupEgressMaster:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "8443"
      ToPort: "8443"
      DestinationSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      GroupId: !GetAtt ServiceAccessSecurityGroup.GroupId
  SlaveSecurityGroupEgressSlave:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      IpProtocol: "tcp"
      FromPort: "8443"
      ToPort: "8443"
      DestinationSecurityGroupId: !GetAtt SlaveSecurityGroup.GroupId
      GroupId: !GetAtt ServiceAccessSecurityGroup.GroupId
  # additional ingress
  AdditionalMasterSecurityGroupIngressBastion:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: HasSSHBastionSecurityGroup
    Properties:
      IpProtocol: tcp
      FromPort: "22"
      ToPort: "22"
      SourceSecurityGroupId:
        { "Fn::ImportValue": !Sub "${ParentSSHBastionStack}-SecurityGroup" }
      GroupId: !GetAtt AdditionalMasterSecurityGroup.GroupId
  AdditionalSlaveSecurityGroupIngressBastion:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: HasSSHBastionSecurityGroup
    Properties:
      IpProtocol: tcp
      FromPort: "22"
      ToPort: "22"
      SourceSecurityGroupId:
        { "Fn::ImportValue": !Sub "${ParentSSHBastionStack}-SecurityGroup" }
      GroupId: !GetAtt AdditionalSlaveSecurityGroup.GroupId
  # emr cluster
  EMRCluster:
    Type: "AWS::EMR::Cluster"
    Properties:
      Name: !Sub "cluster-${AWS::StackName}"
      ReleaseLabel: !Ref ReleaseLabel
      Applications:
        - Name: Hadoop
        - Name: Hive
        - Name: Presto
        - Name: Hue
        - Name: Spark
        - Name: Livy
      AutoScalingRole: !Ref AutoScalingRole
      Configurations:
        - Classification: hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
        - Classification: spark-hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
      EbsRootVolumeSize: !Ref EbsRootVolumeSize
      Instances:
        Ec2KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
        Ec2SubnetId:
          !Select [
            0,
            !Split [
              ",",
              { "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPrivate" },
            ],
          ]
        EmrManagedMasterSecurityGroup: !Ref MasterSecurityGroup
        AdditionalMasterSecurityGroups:
          - !Ref AdditionalMasterSecurityGroup
        EmrManagedSlaveSecurityGroup: !Ref SlaveSecurityGroup
        AdditionalSlaveSecurityGroups:
          - !Ref AdditionalSlaveSecurityGroup
        ServiceAccessSecurityGroup: !Ref ServiceAccessSecurityGroup
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref MasterInstanceType
          Market: ON_DEMAND
          Name: Master
        CoreInstanceGroup:
          InstanceCount: !Ref NumberOfCoreInstances
          InstanceType: !Ref CoreInstanceType
          Market: ON_DEMAND
          Name: Core
        TerminationProtected: true
      JobFlowRole: !Ref Ec2InstanceProfile
      LogUri: !Sub "s3n://${LogS3BucketName}/elasticmapreduce/"
      ServiceRole: !Ref ServiceRole
      StepConcurrencyLevel: !Ref StepConcurrencyLevel
      VisibleToAllUsers: true
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref GlueDatabaseName
